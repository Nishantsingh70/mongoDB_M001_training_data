Query Operators - Comparison lecture:

This lesson used the following commands:

Connect to the Atlas cluster:

mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"

Switch to this database:

use sample_training

Find all documents where the tripduration was less than or equal to 70 seconds and the usertype was not Subscriber:

db.trips.find({ "tripduration": { "$lte" : 70 },
                "usertype": { "$ne": "Subscriber" } }).pretty()

Find all documents where the tripduration was less than or equal to 70 seconds and the usertype was Customer using a redundant equality operator:

db.trips.find({ "tripduration": { "$lte" : 70 },
                "usertype": { "$eq": "Customer" }}).pretty()

Find all documents where the tripduration was less than or equal to 70 seconds and the usertype was Customer using the implicit equality operator:

db.trips.find({ "tripduration": { "$lte" : 70 },
                "usertype": "Customer" }).pretty()

===========================================================================

Chapter 4: Advanced CRUD Operations
Lab 1: Comparison Operators

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

How many documents in the sample_training.zips collection have fewer than 1000 people listed in the pop field?

Copy/paste the exact numeric value (without double quotes) of the result that you get into the response field.

Attempts Remaining:Correct Answer
Enter answer here:

8065

To get this value use the following query:

db.zips.find({ "pop": { "$lt": 1000 }}).count()

Use the $lt instead of $lte operator to exclude all documents that have exactly 1000 people listed in the pop field.

==================================================================================

Chapter 4: Advanced CRUD Operations
Lab 2: Comparison Operators

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

What is the difference between the number of people born in 1998 and the number of people born after 1998 in the sample_training.trips collection?

Enter the exact numeric value of the result that you get into the response field.

Attempts Remaining:Correct Answer
Enter answer here:

6

You can use the following queries to get this value:

db.trips.find({ "birth year": { "$gt": 1998 }}).count()
db.trips.find({ "birth year": 1998 }).count()

Use the $gt instead of $gte operator to exclude all 1998 births, and then see how many people were born in 1998 by using implicit equality, 
then subtract the two values to get the difference.

===========================================================================================

Chapter 4: Advanced CRUD Operations
Lab 3: Comparison Operators

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

Using the sample_training.routes collection find out which of the following statements will return all routes that have at least one stop in them?

Attempts Remaining:Correct Answer

Check all answers that apply:
db.routes.find({ "stops": { "$ne": 0 }}).pretty()    (right)
db.routes.find({ "stops": { "$lt": 0 }}).pretty()
db.routes.find({ "stops": { "$gte": 0 }}).pretty()
db.routes.find({ "stops": { "$gt": 0 }}).pretty()    (right)

db.routes.find({ "stops": { "$gt": 0 }}).pretty()

    This is correct.
    The given query looks for strict equality where the stops field has to be greater than zero, thus excluding all zero stops.

db.routes.find({ "stops": { "$ne": 0 }}).pretty()

    This is correct.
    This query will also work, given that there are no non-negative or non- numeric values in this collection. It returns all documents where the stops field is not equal to 0.

db.routes.find({ "stops": { "$gte": 0 }}).pretty()

    This is incorrect.
    Using greater than or equal to operator will include documents where stops equal to zero making the result set invalid for this question.

db.routes.find({ "stops": { "$lt": 0 }}).pretty()

    This is incorrect.
    There is no way to have less than zero stops for a flight, so this query yields zero results and asks for impossible information.


================================================================================================

Query Operators - Logic lecture:

This lesson used the following commands:

Connect to the Atlas cluster:

mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"

Switch to this database:

use sample_training

Find all documents where airplanes CR2 or A81 left or landed in the KZN airport:

db.routes.find({ "$and": [ { "$or" :[ { "dst_airport": "KZN" },
                                    { "src_airport": "KZN" }
                                  ] },
                          { "$or" :[ { "airplane": "CR2" },
                                     { "airplane": "A81" } ] }
                         ]}).pretty()

===================================================================================================

Chapter 4: Advanced CRUD Operations
Quiz 1: Logic Operators

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

How many businesses in the sample_training.inspections dataset have the inspection result "Out of Business" and belong to the "Home Improvement Contractor - 100" sector?

Enter the exact numeric value of the result that you get into the response field.

Attempts Remaining:Correct Answer
Enter answer here:

4

To get this value use the following query:

db.inspections.find({ "result": "Out of Business",
                      "sector": "Home Improvement Contractor - 100" }).count()

This is a trick question because there is no need to explicitly use a logic operator, you can get the result by using an implicit $and and specifying the query conditions 
separated by a comma. However, you will still get the right answer if you used an explicit $and operator to reach this answer.

========================================================================================================

Chapter 4: Advanced CRUD Operations
Quiz 2: Logic Operators

Problem:
Which is the most succinct query to return all documents from the sample_training.inspections collection where the inspection date is either 
"Feb 20 2015", or "Feb 21 2015" and the company is not part of the "Cigarette Retail Dealer - 127" sector?

Attempts Remaining:Correct Answer

Choose the best answer:

db.inspections.find(
  { "$or": [ { "date": "Feb 20 2015" },
             { "date": "Feb 21 2015" }],
    "$not": { "sector": "Cigarette Retail Dealer - 127" }}).pretty()

db.inspections.find(
  { "$or": [ { "date": "Feb 20 2015" },
             { "date": "Feb 21 2015" } ],
    "sector": { "$ne": "Cigarette Retail Dealer - 127" }}).pretty()                (right)

db.inspections.find(
  { "$and": [
      { "$or": [
                 { "date": "Feb 20 2015" },
                 { "date": "Feb 21 2015" } ] },
      {"sector": { "$ne":"Cigarette Retail Dealer - 127" }}]
  }).pretty()

db.inspections.find(
  { "$or": [ { "date": "Feb 20 2015" },
             { "date": "Feb 21 2015" } ],
    "sector": { "$ne": "Cigarette Retail Dealer - 127" }}).pretty()



This is correct.

This query accounts for both dates that we are looking for and excludes all documents where the sector is "Cigarette Retail Dealer - 127" by using the $ne not 
equal comparison operator.

db.inspections.find(
  { "$or": [ { "date": "Feb 20 2015" },
             { "date": "Feb 21 2015" }],
    "$not": { "sector": "Cigarette Retail Dealer - 127" }}).pretty()

This is incorrect.

While this query looks for the right dates and correctly uses the $or operator, it is incorrectly using the $not logic operator. $not negates a logical expression,
 and in this case, will result in an error.

db.inspections.find(
  { "$and": [
      { "$or": [
                 { "date": "Feb 20 2015" },
                 { "date": "Feb 21 2015" } ] },
      {"sector": { "$ne":"Cigarette Retail Dealer - 127" }}]
  }).pretty()

This is incorrect.

This statement will return the correct documents, but it is unnecessarily using the $and operator and thus can not be the best way to get the required documents.

===========================================================================================================================

Chapter 4: Advanced CRUD Operations
Lab 1: Logic Operators

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

Before solving this exercise, make sure to undo some of the changes that we made to the zips collection earlier in the course by running the following command:

db.zips.updateMany({ "city": "HUDSON" }, { "$inc": { "pop": -10 } })

How many zips in the sample_training.zips dataset are neither over-populated nor under-populated?

In this case, we consider population of more than 1,000,000 to be over- populated and less than 5,000 to be under-populated.

Copy/paste the exact numeric value (without double quotes) of the result that you get into the response field.

Attempts Remaining:Correct Answer
Enter answer here:

11193

To get this value use the following range query:

db.zips.find({ "pop": { "$gte": 5000, "$lte": 1000000 }}).count()

You could also use the $nor operator if you want to use a logic operator like so:

db.zips.find({ "$nor": [ { "pop": { "$lt":5000 } },
             { "pop": { "$gt": 1000000 } } ] } ).count()

The best operator for this case is $nor, it excludes both cases from consideration and we are left with the remaining set.

============================================================================================================================

Chapter 4: Advanced CRUD Operations
Lab 2: Logic Operators

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

How many companies in the sample_training.companies dataset were

either founded in 2004

        [and] either have the social category_code [or] web category_code,

[or] were founded in the month of October

        [and] also either have the social category_code [or] web category_code?

Copy/paste the exact numeric value (without double quotes) of the result that you get into the response field.

Attempts Remaining:Correct Answer
Enter answer here:

149

To get this value use the following query:

db.companies.find({ "$and": [
                        { "$or": [ { "founded_year": 2004 },
                                   { "founded_month": 10 } ] },
                        { "$or": [ { "category_code": "web" },
                                   { "category_code": "social" }]}]}).count()

In this case, you have to use an explicit $and. There are two or statements, and to get all the companies that match the required specification both or statements have to be true 
at the same time.

===============================================================================================================================

Expressive Query Operator lecture:

This lesson used the following commands:

Connect to the Atlas cluster:

mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"

Switch to this database:

use sample_training

Find all documents where the trip started and ended at the same station:

db.trips.find({ "$expr": { "$eq": [ "$end station id", "$start station id"] }
              }).count()

Find all documents where the trip lasted longer than 1200 seconds, and started and ended at the same station:

db.trips.find({ "$expr": { "$and": [ { "$gt": [ "$tripduration", 1200 ]},
                         { "$eq": [ "$end station id", "$start station id" ]}
                       ]}}).count()


=================================================================================================================================

Chapter 4: Advanced CRUD Operations
Quiz 1: $expr

Problem:
What are some of the uses for the $ sign in MQL?

Attempts Remaining:Correct Answer

Check all answers that apply:
$ changes the data type of the given value to a monetary denomination.
$ makes the world go round.
$ signifies that you are looking at the value of that field rather than the field name.   (right)
$ denotes an operator.                                                                    (right)

==================================================================================================================================

Chapter 4: Advanced CRUD Operations
Quiz 2: $expr

Problem:
Which of the following statements will find all the companies that have more employees than the year in which they were founded?

Attempts Remaining:Correct Answer

Check all answers that apply:

db.companies.find(
  { "$expr": { "$gt": [ "$founded_year", "$number_of_employees" ] } }
).count()

db.companies.find(
    { "$expr": { "$lt": [ "$founded_year", "$number_of_employees" ] } }
  ).count()                                                                                      (right)

db.companies.find({ "number_of_employees": { "$gt":  "$founded_year" }
                  }).count()

db.companies.find(
    { "$expr": { "$gt": [ "$number_of_employees", "$founded_year" ]} }
  ).count()                                                                                      (right)
  
=====================================================================================================================================

Chapter 4: Advanced CRUD Operations
Lab: $expr

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

How many companies in the sample_training.companies collection have the same permalink as their twitter_username?

Attempts Remaining:Correct Answer
Enter answer here:

1299

To get this value use the following query:

db.companies.find({ "$expr": { "$eq": [ "$permalink", "$twitter_username" ] }
                  }).count()

We are comparing the values of the two fields within the same document to see if they are equal using the $ to access field values, and the 
aggregation syntax to use the $eq operator as we saw in the lesson.

=============================================================================================================================================

Array Operators lecture:

At 0:18 there is a factual error in this lesson. The correct functionality of the $push operator is that when the field is not an array, the operation will fail. However, if the field is absent in the document to update, $push adds the array field with the value as its element.

To learn more about all available update operators in MQL, visit our excellent documentation page.

This lesson used the following commands:

Connect to the Atlas cluster:

mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"

Switch to this database:

use sample_airbnb

Find all documents with exactly 20 amenities which include all the amenities listed in the query array:

db.listingsAndReviews.find({ "amenities": {
                                  "$size": 20,
                                  "$all": [ "Internet", "Wifi",  "Kitchen",
                                           "Heating", "Family/kid friendly",
                                           "Washer", "Dryer", "Essentials",
                                           "Shampoo", "Hangers",
                                           "Hair dryer", "Iron",
                                           "Laptop friendly workspace" ]
                                         }
                            }).pretty()

===================================================================================================================================================

Chapter 4: Advanced CRUD Operations
Lab 1: Array Operators

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

What is the name of the listing in the sample_airbnb.listingsAndReviews dataset that accommodates more than 6 people and has exactly 50 reviews?

Copy/Paste the value of the "name" field into the response field without quotation marks.

Attempts Remaining:Correct Answer
Enter answer here:

Sunset Beach Lodge Retreat

To get this value use the following query:

db.listingsAndReviews.find({ "reviews": { "$size":50 },
                             "accommodates": { "$gt":6 }})

We can use the $size operator to select only the documents that have exactly 50 elements in the reviews field. This query can also run in Atlas so
 that it is easier to see the value of the name field right away.

======================================================================================================================================================

Chapter 4: Advanced CRUD Operations
Lab 2: Array Operators

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

Using the sample_airbnb.listingsAndReviews collection find out how many documents have the "property_type" "House", and include "Changing table" as 
one of the "amenities"?

Enter the number of results to the response field.

Attempts Remaining:Correct Answer
Enter answer here:

11

To get this value use the following query in the mongo shell:

db.listingsAndReviews.find({ "property_type": "House",
                             "amenities": "Changing table" }).count()

or this query in the Atlas UI

{"property_type": "House","amenities": "Changing table"}

There is no need to use any array operators in this scenario. The default MQL behavior is to return documents in which the "amenities" field contains 
the element "Changing table".

=========================================================================================================================================================

Chapter 4: Advanced CRUD Operations
Quiz: Array Operators

Problem:
Which of the following queries will return all listings that have "Free parking on premises", "Air conditioning", and "Wifi" as part of their amenities, and have at least 2 bedrooms in the sample_airbnb.listingsAndReviews collection?

Attempts Remaining:Correct Answer

Choose the best answer:

db.listingsAndReviews.find(
  { "amenities":
      { "$all": [ "Free parking on premises", "Wifi", "Air
        conditioning" ] }, "bedrooms": { "$gte":  2 } } ).pretty()                     (right)

db.listingsAndReviews.find(
  { "amenities":
      { "$all": [ "Free parking on premises", "Wifi", "Air
                  conditioning" ] },
    "bedrooms": { "$lte": 2 } }).pretty()

db.listingsAndReviews.find(
   { "amenities": [ "Free parking on premises", "Wifi", "Air
                    conditioning" ]},
     "bedrooms": { "$gte": 2 } } ).pretty()

db.listingsAndReviews.find(
  { "amenities": "Free parking on premises", "amenities": "Wifi",
    "amenities": "Air conditioning", "bedrooms": { "$gte": 2 }
  }).pretty()

db.listingsAndReviews.find(
  { "amenities":
     { "$all": [ "Free parking on premises", "Wifi", "Air conditioning" ] },
    "bedrooms": { "$gte":  2 } }).pretty()

This is correct.
We have to use the $all array operator In order to get all documents where the amenities array contains these three elements regardless of their order. 
To get the desired number of bedrooms the best operator to use is $gte, since it includes 2, but also shows other listings with more bedrooms.

db.listingsAndReviews.find(
  { "amenities": [ "Free parking on premises", "Wifi", "Air conditioning" ]},
    "bedrooms": { "$gte": 2 } }).pretty()

This is incorrect.
Because the amenities are listed in an array without any additional operators, MongoDB will look for documents that are an exact match. Only documents 
in which the amenities field looks exactly like the one in the query will be returned, which is not what the question prompt is looking for.

db.listingsAndReviews.find(
  { "amenities": "Free parking on premises", "amenities": "Wifi",
    "amenities": "Air conditioning", "bedrooms": { "$gte": 2 } } ).pretty()

This is incorrect.
This query will return all documents that contain "Air conditioning" as one of the amenities. This is because a query should be a valid JSON document. 
A valid JSON document cannot have multiple identical keys so MongoDB will go through each query requirement overwriting requirements with identical field 
names until it reaches the last mention of a field in this query.

db.listingsAndReviews.find(
  { "amenities":
      { "$all": [ "Free parking on premises", "Wifi", "Air conditioning" ] },
    "bedrooms": { "$lte": 2 } }).pretty()

This is incorrect.
The array field query is composed correctly, but the bedrooms requirement isn't met because $lte will return all listings with at most two bedrooms instead of at least two.

=============================================================================================================================================

Array Operators and Projection lecture:

Commands used in this lesson:

Connect to the Atlas cluster:

mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"

Switch to this database:

use sample_airbnb

Find all documents with exactly 20 amenities which include all the amenities listed in the query array, and display their price and address:

db.listingsAndReviews.find({ "amenities":
        { "$size": 20, "$all": [ "Internet", "Wifi",  "Kitchen", "Heating",
                                 "Family/kid friendly", "Washer", "Dryer",
                                 "Essentials", "Shampoo", "Hangers",
                                 "Hair dryer", "Iron",
                                 "Laptop friendly workspace" ] } },
                            {"price": 1, "address": 1}).pretty()

Find all documents that have Wifi as one of the amenities only include price and address in the resulting cursor:

db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1, "_id": 0 }).pretty()

Find all documents that have Wifi as one of the amenities only include price and address in the resulting cursor, also exclude ``"maximum_nights"``. **This will be an error:*

db.listingsAndReviews.find({ "amenities": "Wifi" },
                           { "price": 1, "address": 1,
                             "_id": 0, "maximum_nights":0 }).pretty()

Switch to this database:

use sample_training

Get one document from the collection:

db.grades.findOne()

Find all documents where the student in class 431 received a grade higher than 85 for any type of assignment:

db.grades.find({ "class_id": 431 },
               { "scores": { "$elemMatch": { "score": { "$gt": 85 } } }
             }).pretty()

Find all documents where the student had an extra credit score:

db.grades.find({ "scores": { "$elemMatch": { "type": "extra credit" } }
               }).pretty()


=======================================================================================================================================================

Chapter 4: Advanced CRUD Operations
Lab: Array Operators and Projection

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

How many companies in the sample_training.companies collection have offices in the city of Seattle?

Copy/paste your answer to the response field.

Attempts Remaining:Correct Answer
Enter answer here:

117

To get this value use the following query:

db.companies.find({ "offices": { "$elemMatch": { "city": "Seattle" } }
                  }).count()

"offices" is an array that contains documents with the address information from each office. We use $elemMatch to return all documents in which an office array 
element contains the field city with the value Seattle.

============================================================================================================================================================

Chapter 4: Advanced CRUD Operations
Quiz: Array Operators and Projection

Problem:
Which of the following queries will return only the names of companies from the sample_training.companies collection that had exactly 8 funding rounds?

Attempts Remaining:Correct Answer

Choose the best answer:

db.companies.find({ "funding_rounds": { "$size": 8 } },
                  { "name": 0, "founded_year": 1 })

db.companies.find({ "funding_rounds": { "$size": 8 } },
                  { "name": 1, "_id": 0 })

db.companies.find({ "funding_rounds": { "$size": 8 } }, { "name": 1 })

db.companies.find({ "funding_rounds": { "$size": 8 } },
                  { "name": 1, "_id": 0 })

This is correct.
Since we are looking to only view the names of companies then we have to explicitly exclude the _id in the projection.

db.companies.find({ "funding_rounds": { "$size": 8 } }, { "name": 1 })

This is incorrect.
By default, the _id values will be included in the resulting cursor, but the question prompt asks to only view the company names. This query will return 
both _id and name values for matching documents, thus not satisfying the question prompt.

db.companies.find({ "funding_rounds": { "$size": 8 } },
                  { "name": 0, "founded_year": 1 })

This is incorrect.
When using a zero in projection we exclude the specified field, so if this query worked it would return all fields except for the name field. 
This query, however, will return an error because it has a mix of inclusion and exclusion that is not allowed in projection.

==================================================================================================================================================================

Array Operators and Sub-Documents lecture:

Commands used in this lesson:

Connect to the Atlas cluster:

mongo "mongodb+srv://<username>:<password>@<cluster>.mongodb.net/admin"

use sample_training

db.trips.findOne({ "start station location.type": "Point" })

db.companies.find({ "relationships.0.person.last_name": "Zuckerberg" },
                  { "name": 1 }).pretty()

db.companies.find({ "relationships.0.person.first_name": "Mark",
                    "relationships.0.title": { "$regex": "CEO" } },
                  { "name": 1 }).count()


db.companies.find({ "relationships.0.person.first_name": "Mark",
                    "relationships.0.title": {"$regex": "CEO" } },
                  { "name": 1 }).pretty()

db.companies.find({ "relationships":
                      { "$elemMatch": { "is_past": true,
                                        "person.first_name": "Mark" } } },
                  { "name": 1 }).pretty()

db.companies.find({ "relationships":
                      { "$elemMatch": { "is_past": true,
                                        "person.first_name": "Mark" } } },
                  { "name": 1 }).count()

===================================================================================================================================================================

Chapter 4: Advanced CRUD Operations
Lab 1: Querying Arrays and Sub-Documents

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

How many trips in the sample_training.trips collection started at stations that are to the west of the -74 longitude coordinate?

Longitude decreases in value as you move west.

Note: We always list the longitude first and then latitude in the coordinate pairs; i.e.

<field_name>: [ <longitude>, <latitude> ]

Attempts Remaining:Correct Answer
Enter answer here:

1928

To get this value use the following query:

db.trips.find({ "start station location.coordinates.0": { "$lt": -74 }}).count()

The "start station location" has a sub-document that contains the coordinates array. To get to this coordinates array we must use use dot-notation.
 We can issue a range query to find all documents in this longitude. The caveat is to remember that all trips take place in NYC so the latitude value 
 in the coordinates array will always be positive, and we don't have to worry about it when issuing a range query like this.
 
 ====================================================================================================================================================================
 
 Chapter 4: Advanced CRUD Operations
Lab 2: Querying Arrays and Sub-Documents

Problem:

To complete this exercise connect to your Atlas cluster using the in-browser IDE space at the end of this chapter.

How many inspections from the sample_training.inspections collection were conducted in the city of NEW YORK?

Attempts Remaining:Correct Answer
Enter answer here:

18279

To get this value use the following query:

db.inspections.find({ "address.city": "NEW YORK" }).count()

Here we need to use dot-notation to get to the "city" field and search for all documents where this field is equal to "NEW YORK".

======================================================================================================================================================================

Chapter 4: Advanced CRUD Operations
Quiz: Querying Arrays and Sub-documents

Problem:
Which of the following queries will return the names and addresses of all listings from the sample_airbnb.listingsAndReviews collection where the first amenity in the list is "Internet"?

Attempts Remaining:Correct Answer

Choose the best answer:

db.listingsAndReviews.find({ "amenities.0": "Internet" },
                           { "name": 1, "address": 1 }).pretty()                (right)

db.listingsAndReviews.find({ "amenities.[0]": "Internet" },
                           { "name": 1, "address": 1 }).pretty()

db.listingsAndReviews.find({ "amenities.$0": "Internet" },
                           { "name": 1, "address": 1 }).pretty()

db.listingsAndReviews.find({ "amenities.0": "Internet" },
                           { "name": 1, "address": 1 }).pretty()


This is correct.
To reach the first element in an array field we need to use dot notation and the element's position which is zero for the first element in most arrays in most languages. For the projection part, we don't need to explicitly exclude the _id field because the question prompt isn't terribly strict about that.

db.listingsAndReviews.find({ "amenities.$0": "Internet" },
                           { "name": 1, "address": 1 }).pretty()

This is incorrect.
There is no need to add a $ before stating the element position in this case. This query will not return any documents.

db.listingsAndReviews.find({ "amenities.[0]": "Internet" },
                           { "name": 1, "address": 1 }).pretty()

This is incorrect.
Similarly, there is no need for square brackets around the position of the array element, and this query will also return zero documents.

========================================================================================================================================================================

Query Operators - Comparison

1. Find all documents where the trip was less than or equal to 70 seconds
   and the usertype was not "Subscriber"
2. Find all documents where the trip was less than or equal to 70 seconds
   and the usertype was "Customer" using a redundant equality operator.
3. Find all documents where the trip was less than or equal to 70 seconds
   and the usertype was "Customer" using the implicit equality operator.


Query Operators - Logic

Find all documents where airplanes CR2 or A81 left or landed in the KZN
airport.

Expressive Query Operator

1. Find all documents where the trip started and ended at the same station.
2. Find all documents where the trip lasted longer than 1200 seconds, and
   started and ended at the same station.

Array Operators

1. Find all documents that contain more than one amenity without caring
   about the order of array elements.
2. Only return documents that list exactly 20 amenities in this field and
   contain the amenities of your choosing.

Array Operators and Projection

1. Find all documents in the sample_airbnb database with exactly 20
   amenities which include all the amenities listed in the query array, and display their price and address.
2. Find all documents in the sample_airbnb database that have Wifi as one of
   the amenities only include price and address in the resulting cursor.
3. Find all documents in the sample_airbnb database that have Wifi as one of
   the amenities only include price and address in the resulting cursor,
   also exclude "maximum_nights".
   Was this operation successful? Why?
4. Find all documents in the grades collection where the student in class
   431 received a grade higher than 85 for any type of assignment.
5. Find all documents in the grades collection where the student had an
   extra credit score.

Array Operators and Sub-Documents

1. Find any document from the companies collection where the last name
   Zuckerberg in the first element of the relationships array.
2. Find how many documents from the companies collection have CEOs who's
   first name is Mark and who are listed as the first relationship in this
   array for their company entry.
3. Find all documents in the companies collection where people named Mark
   used to be in the senior company leadership array, a.k.a the
   relationships array, but are no longer with the company.

Query Operators - Comparison

1. How many documents in the sample_training.zips collection have fewer than
   1000 people listed in the pop field?

2. What is the difference between the number of people born in 1998 and the
   number of people born after 1998 in the sample_training.trips collection?

3. Using the sample_training.routes collection find out which of the
   following statements will return all routes that have at least one stop
   in them?

        -  db.routes.find({ "stops": { "$gt": 0 }}).pretty()
        -  db.routes.find({ "stops": { "$gte": 0 }}).pretty()
        -  db.routes.find({ "stops": { "$ne": 0 }}).pretty()
        -  db.routes.find({ "stops": { "$lt": 10 }}).pretty()


Query Operators - Logic

1. How many businesses in the sample_training.inspections dataset have the
   inspection result "Out of Business" and belong to the Home Improvement
   Contractor - 100 sector?
2. How many zips in the sample_training.zips dataset are neither over-
   populated nor under-populated?

   In this case, we consider population over 1,000,000 to be over-populated
   and under 5,000 to be under-populated.
3. How many companies in the sample_training.companies dataset were either
   founded in 2004, or in the month of October and either have the social
   category_code or web category_code?

Expressive Query Operator

How many companies in the sample_training.companies collection have the same
permalink as their twitter_username?

Array Operators

1. What is the name of the listing in the sample_airbnb.listingsAndReviews
   dataset accommodate more than 6 people and has exactly 50 reviews?
2. How many documents have the property_type House, and include Changing
   table as one of the amenities?

Array Operators and Projection

How many companies in the sample_training.companies collection have offices
in the city of Seattle?

Array Operators and Sub-Documents

1. Latitude decreases in value as you move west.

   How many trips in the sample_training.trips collection started at
   stations that are to the west of the -74 latitude coordinate?
2. How many inspections from the sample_training.inspections collection were
   conducted in the city of NEW YORK?



